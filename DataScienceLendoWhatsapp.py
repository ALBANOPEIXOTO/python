# -*- coding: utf-8 -*-
"""Wpp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Mub5SjG6T3PfjaXBwuJnktMYuoqiqLn
"""

#bibliotca para formatar data.
import datetime
from datetime import date
#
from collections import Counter

#
import collections

#
import pandas as pd

#
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sns

# algoritimo trata mensagens provindas do android, porem com alguns ajustes é possível ler IOS
arq =open('wpp.txt', "r", encoding='UTF-8')


contatos = []
msg_contatos = []
contato_tmp = ""
datas = []
lista_erros = []
remove_pl = ['a', 'e', 'i', 'o', 'u', 'no', 'com', 'aqui', 'as', 'está', 'tem', 'na', 'eu','um','uma','<Arquivo','oculto>','se','em','pra','para','do','da','dia','de','','que','não','um','uma', 'bom']


for linha in arq:

  

  if (len(linha[17:].split(':')) >= 2):
    if (linha[17] == '-' and (linha[0] == '0' or linha[0] == '1'  or linha[0] == '2' or linha[0] == '3' or linha[0] == '4' or linha[0] == '5' or linha[0] == '6' or linha[0] == '7' or linha[0] == '8' or linha[0] == '9')):
      
     
      data_tmp = datetime.datetime.strptime(linha[0:16] + ':00', '%d/%m/%Y %H:%M:%S')
            
      msg = linha[19:]
      
      contato_tmp = msg.split(':')[0].replace("\n","")
      contatos.append(msg.split(':')[0].replace("\n",""))

      if len(linha[17:].split(':')) == 2:
        msg_contatos.append(msg.split(':')[1].replace("\n",""))
      else:
        contador = 1
        novaMsg = ""
        concat = ""
        for i in linha[17:].split(':'):
          if (contador >= 2):
            if (contador > 2):
              concat = ":"
            novaMsg = novaMsg + concat + i
          contador = contador + 1
        msg_contatos.append(novaMsg.replace("\n",""))
        
      
      datas.append(data_tmp)
    else:
      contatos.append(contato_tmp)
      msg_contatos.append(msg.split(':')[1].replace("\n",""))
      datas.append(data_tmp)

arq.close()

def trata_palavras(mgs):
  palavras = []
  for mgs1 in mgs:
    #print(mgs1)
    for palavra in mgs1.split(' '):
      if (len(palavra) > 1):
       palavras.append(palavra.replace(',','').replace('.','').replace(':','').replace('',''))
    
  for i in remove_pl:
    for i2 in palavras:
      if (i.upper() == i2.upper()):
        try:
         palavras.remove(i2)
        except ValueError:
         lerros.append('Valor não encontrado')
      elif (i == i2):
        try:
         palavras.remove(i2)
        except ValueError:
         lerros.append( 'Valor não encontrado')
 
  return dict(Counter(palavras))   

palavras_dict = trata_palavras(msg_contatos)

#cria gráfico com as 5 palavras mais faladas


palavras_df = pd.DataFrame(palavras_dict.items(), columns=['Palavras', 'QtdeFrequencia'])
palavras_df = palavras_df.sort_values(by=['QtdeFrequencia'], ascending=False)
palavras_df.head(5).plot(kind='barh', x = 'Palavras', y='QtdeFrequencia', title='Palavras mais faladas')

datas

def trata_data(lista_dt):
  list_dia_semana = []
  for data in lista_dt:   
      if(data.weekday() == 0):
          list_dia_semana.append('segunda')
      elif(data.weekday() == 1):
          list_dia_semana.append('terca')
      elif(data.weekday() == 2):
          list_dia_semana.append('quarta')
      elif(data.weekday() == 3):
          list_dia_semana.append('quinta')
      elif(data.weekday() == 4):
          list_dia_semana.append('sexta')
      elif(data.weekday() == 5):
          list_dia_semana.append('sabado')
      elif(data.weekday() == 6):
          list_dia_semana.append('domingo')
  return dict(Counter(list_dia_semana))

data_dict = trata_data(datas)

semana_df = pd.DataFrame(data_dict.items(), columns=['Dia', 'Qtde'])
semana_df = semana_df.sort_values(by=['Qtde'], ascending=False)
semana_df.head(7).plot(kind='bar', x = 'Dia', y='Qtde', title='Dias com maior frequencia de conversa')

def trata_hora(lista_dt):
  list_horas = []
  for data in lista_dt:
      list_horas.append(data.time().hour)

  return dict(Counter(list_horas))

hora_maior_dict = trata_hora(datas)

hora_maior_df = pd.DataFrame(hora_maior_dict.items(), columns=['Hora', 'Qtde'])
hora_maior_df = hora_maior_df.sort_values(by=['Qtde'], ascending=False)
hora_maior_df.head(10).plot(kind='bar', x = 'Hora', y='Qtde', title='Horas com maior frequencia de conversa')

hora_maior_df = pd.DataFrame(hora_maior_dict.items(), columns=['Hora', 'Qtde'])
hora_maior_df = hora_maior_df.sort_values(by=['Qtde'], ascending=True)
hora_maior_df.head(10).plot(kind='bar', x = 'Hora', y='Qtde', title='Horas com menor frequencia de conversa')
